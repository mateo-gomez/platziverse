{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","findByuuid","update","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice","findByUuid"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent');\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Model findById stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  // Model findByUuid Stub\n  AgentStub.findByuuid = sandbox.stub()\n  AgentStub.findByuuid.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Model update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.true(AgentStub.findById.called, 'findById shouled be called on model')\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - exists', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\n  t.true(AgentStub.findOne.calledTwice, 'findOne should be called twoice')\n  t.true(AgentStub.update.calledOnce, 'update should be called once')\n\n  t.deepEqual(agent, single, 'agent should be the same')\n})\n\ntest.serial('Agent#findByuuid', async t => {\n  let agent = await db.Agent.findByUuid(uuid)\n\n  t.true(AgentStub.findByUuid.called, 'findByUuid should be called on model')\n})\n"]}
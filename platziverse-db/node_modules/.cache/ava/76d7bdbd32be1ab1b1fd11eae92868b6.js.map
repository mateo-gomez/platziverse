{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","connectedArgs","connected","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","update","findAll","all","usernameArgs","platzi","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice","findByUuid","is","agents","length","findConnected","findByUsername"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN;AADI,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,OAAO,aAAX;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEA,IAAIC,WAAW;AACbC,SAAO;AACLL;AADK;AADM,CAAf;;AAMA,IAAIM,gBAAgB;AAClBD,SAAO;AACLE,eAAW;AADN;AADW,CAApB;;AAMArB,KAAKsB,UAAL,CAAgB,YAAY;AAC1BL,YAAUf,MAAMqB,aAAN,EAAV;;AAEAR,cAAY;AACVS,aAASP,QAAQR,GAAR;;AAGX;AAJY,GAAZ,CAKAM,UAAUU,OAAV,GAAoBR,QAAQS,IAAR,EAApB;AACAX,YAAUU,OAAV,CAAkBE,QAAlB,CAA2BT,QAA3B,EAAqCU,OAArC,CAA6CC,QAAQC,OAAR,CAAgB1B,cAAc2B,MAAd,CAAqBjB,IAArB,CAAhB,CAA7C;;AAEA;AACAC,YAAUiB,QAAV,GAAqBf,QAAQS,IAAR,EAArB;AACAX,YAAUiB,QAAV,CAAmBL,QAAnB,CAA4Bd,EAA5B,EAAgCe,OAAhC,CAAwCC,QAAQC,OAAR,CAAgB1B,cAAc6B,IAAd,CAAmBpB,EAAnB,CAAhB,CAAxC;;AAEA;AACAE,YAAUmB,MAAV,GAAmBjB,QAAQS,IAAR,EAAnB;AACAX,YAAUmB,MAAV,CAAiBP,QAAjB,CAA0BjB,MAA1B,EAAkCQ,QAAlC,EAA4CU,OAA5C,CAAoDC,QAAQC,OAAR,CAAgBpB,MAAhB,CAApD;;AAEA;AACAK,YAAUoB,OAAV,GAAoBlB,QAAQS,IAAR,EAApB;AACAX,YAAUoB,OAAV,CAAkBR,QAAlB,GAA6BC,OAA7B,CAAqCC,QAAQC,OAAR,CAAgB1B,cAAcgC,GAA9B,CAArC;AACArB,YAAUoB,OAAV,CAAkBR,QAAlB,CAA2BP,aAA3B,EAA0CQ,OAA1C,CAAkDC,QAAQC,OAAR,CAAgB1B,cAAciB,SAA9B,CAAlD;AACAN,YAAUoB,OAAV,CAAkBR,QAAlB,CAA2BU,YAA3B,EAAyCT,OAAzC,CAAiDC,QAAQC,OAAR,CAAgB1B,cAAckC,MAA9B,CAAjD;;AAEA,QAAMC,gBAAgBpC,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMY,SADc;AAEtC,uBAAmB,MAAMR;AAFa,GAAlB,CAAtB;;AAKAS,OAAK,MAAMuB,cAAclC,MAAd,CAAX;AACD,CA/BD;;AAiCAL,KAAKwC,SAAL,CAAe,MAAM;AACnBvB,aAAWA,QAAQwB,OAAR,EAAX;AACD,CAFD;;AAIAzC,KAAK,OAAL,EAAc0C,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIA5C,KAAK6C,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUtB,OAAV,wBAAkBuB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUtB,OAAV,+BAAkBwB,UAAlB,aAA6BzC,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,oCAAjD;AACAmC,IAAEI,IAAF,yBAAO,iEAAWtC,SAAX,wBAAqBuC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWtC,SAAX,+BAAqBwC,UAArB,aAAgCjC,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,mCAAnD;AACD,CALD;;AAOAf,KAAK6C,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACvC,MAAIO,QAAQ,MAAMjC,GAAG4B,KAAH,CAASZ,QAAT,CAAkBnB,EAAlB,CAAlB;;AAEA6B,IAAEI,IAAF,yBAAO,gEAAUd,QAAV,wBAAmBe,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,qCAAlC;AACAL,IAAEI,IAAF,yBAAO,gEAAUd,QAAV,wBAAmBkB,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,gCAAtC;AACAR,IAAEI,IAAF,yBAAO,uEAAUd,QAAV,+BAAmBgB,UAAnB,aAA8BnC,EAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0C,6CAA1C;;AAEA6B,IAAES,SAAF,CAAYF,KAAZ,EAAmB7C,cAAc6B,IAAd,CAAmBpB,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CARD;;AAUAb,KAAK6C,MAAL,CAAY,+BAAZ,EAA6C,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACtD,MAAIO,QAAQ,MAAMjC,GAAG4B,KAAH,CAASQ,cAAT,CAAwB1C,MAAxB,CAAlB;;AAEAgC,IAAEI,IAAF,yBAAO,gEAAUrB,OAAV,wBAAkBsB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUrB,OAAV,wBAAkB4B,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,iCAAtC;AACAX,IAAEI,IAAF,2BAAO,kEAAUZ,MAAV,wBAAiBgB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,8BAApC;;AAEAR,IAAES,SAAF,CAAYF,KAAZ,EAAmBvC,MAAnB,EAA2B,0BAA3B;AACD,CARD;;AAUAV,KAAK6C,MAAL,CAAY,kBAAZ,EAAgC,MAAMH,CAAN,IAAW;AAAA;;AACzC,MAAIO,QAAQ,MAAMjC,GAAG4B,KAAH,CAASU,UAAT,CAAoBxC,IAApB,CAAlB;;AAEA4B,IAAEI,IAAF,2BAAO,kEAAUrB,OAAV,wBAAkBsB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,sCAAjC;AACD,CAJD;;AAMA/C,KAAK6C,MAAL,CAAY,eAAZ,EAA6B,MAAMH,CAAN,IAAU;AAAA;AAAA;AAAA;;AACrC,MAAIO,QAAQ,MAAMjC,GAAG4B,KAAH,CAAST,OAAT,EAAlB;;AAEAO,IAAEI,IAAF,2BAAO,kEAAUX,OAAV,wBAAkBY,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUX,OAAV,wBAAkBe,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUX,OAAV,+BAAkBa,UAAlB,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuC,uCAAvC;;AAEAN,IAAEa,EAAF,CAAKC,OAAOC,MAAZ,EAAoBrD,cAAcgC,GAAd,CAAkBqB,MAAtC,EAA8C,2BAA9C;AACAf,IAAES,SAAF,CAAYK,MAAZ,EAAoBpD,cAAcgC,GAAlC,EAAuC,2BAAvC;AACD,CATD;;AAWApC,KAAK6C,MAAL,CAAY,qBAAZ,EAAmC,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AAC5C,MAAIO,QAAQ,MAAMjC,GAAG4B,KAAH,CAASc,aAAT,EAAlB;;AAEAhB,IAAEI,IAAF,2BAAO,kEAAUX,OAAV,wBAAkBY,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUX,OAAV,wBAAkBe,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUX,OAAV,+BAAkBa,UAAlB,cAA6B5B,aAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoD,8CAApD;;AAEAsB,IAAEa,EAAF,CAAKC,OAAOC,MAAZ,EAAoBrD,cAAciB,SAAd,CAAwBoC,MAA5C,EAAoD,kCAApD;AACAf,IAAES,SAAF,CAAYK,MAAZ,EAAoBpD,cAAciB,SAAlC,EAA6C,2BAA7C;AACD,CATD;;AAWArB,KAAK6C,MAAL,CAAY,sBAAZ,EAAoC,MAAMH,CAAN,IAAW;AAAA;;AAC7C,MAAIO,QAAQ,MAAMjC,GAAGiC,KAAH,CAASU,cAAT,EAAlB;;AAEAjB,IAAEI,IAAF,2BAAO,kEAAUR,MAAV,wBAAiBS,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,0CAAhC;AACD,CAJD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent');\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\nlet connectedArgs = {\n  where: {\n    connected: true\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Model findById stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  // Model update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // Model findAll Stub\n  AgentStub.findAll = sandbox.stub()\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.true(AgentStub.findById.called, 'findById shouled be called on model')\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - exists', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\n  t.true(AgentStub.findOne.calledTwice, 'findOne should be called twoice')\n  t.true(AgentStub.update.calledOnce, 'update should be called once')\n\n  t.deepEqual(agent, single, 'agent should be the same')\n})\n\ntest.serial('Agent#findByuuid', async t => {\n  let agent = await db.Agent.findByUuid(uuid)\n\n  t.true(AgentStub.findOne.called, 'findByUuid should be called on model')\n})\n\ntest.serial('Agent#findAll', async t=> {\n  let agent = await db.Agent.findAll()\n\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\n\n  t.is(agents.length, agentFixtures.all.length, 'should be the same amount')\n  t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\n})\n\ntest.serial('Agent#findConnected', async t => {\n  let agent = await db.Agent.findConnected()\n\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')\n\n  t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')\n  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\n})\n\ntest.serial('agent#findByUsername', async t => {\n  let agent = await db.agent.findByUsername()\n\n  t.true(AgentStub.platzi.called, 'findByUsername should be called on model')\n})\n"]}
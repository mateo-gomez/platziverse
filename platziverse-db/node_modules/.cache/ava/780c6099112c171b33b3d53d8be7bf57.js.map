{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","t","restore","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWL,MAAMM,GAAN;AADI,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BD,YAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;AACAJ,cAAY;AACVK,aAASH,QAAQH,GAAR;AADC,GAAZ;;AAIA,QAAMO,gBAAgBZ,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMM,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAlB,CAAtB;;AAKAI,OAAK,MAAMK,cAAcX,MAAd,CAAX;AACD,CAZD;;AAcAJ,KAAKgB,SAAL,CAAeC,KAAK;AAClBN,aAAWT,MAAMS,OAAN,CAAcO,OAAd,EAAX;AACD,CAFD;;AAIAlB,KAAK,OAAL,EAAciB,KAAK;AAAA;;AACjBA,IAAEE,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBJ,KAAK;AAAA;AAAA;;AACxBA,IAAEK,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAN,IAAEK,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACD,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire')\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(t => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n})\n"]}